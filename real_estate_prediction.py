# -*- coding: utf-8 -*-
"""Real Estate Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11X6Dv7SgIsG-h7ta8xap4nd-F3T0WrRv
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib

df=pd.read_csv('/content/Bengaluru_House_Data.csv')
df.head(10)

df.shape

df.groupby('area_type')['area_type'].agg('count')

df.drop(columns=['area_type','society','balcony','availability'],inplace=True)

df.shape

df.price.describe()

df.isnull().sum()

df.dropna(inplace=True)

df.shape

df['size'].unique()

df.head()

df['bhk']=df['size'].apply(lambda x: int(x.split(' ')[0]))

df.drop(columns=['size'],inplace=True)

df.head()

arr=df['bhk'].unique()

arr.sort()

arr

df[df.bhk>10]

df.total_sqft.unique()

def isFloat(x):
  try:
    float(x)
  except:
    return False
  return True

for sqft in df.total_sqft:
  if(isFloat(sqft)==False):
    print(sqft)

def convertRange(x):
  tokens=x.split('-')
  if(len(tokens)==2):
    return (float(tokens[0])+float(tokens[1]))/2
  try:
    return float(x)
  except:
    return None

df['total_sqft']=df['total_sqft'].apply(convertRange)

df.head()

for sqft in df.total_sqft:
  if(isFloat(sqft)==False):
    print(sqft)

df.loc[55]

df2=df.copy()

df2['price_per_sqft']=df2['price']*100000/df2['total_sqft']

df2.head()

df2['location'].unique().size

df2.groupby('location')['location'].agg('count').apply(lambda x: x>5)

location_stats=df2.groupby('location')['location'].agg('count')
location_stats_less_10=location_stats[location_stats<10]

location_stats_less_10

df2.location=df2.location.apply(lambda x: 'other' if x in location_stats_less_10 else x)

df2.location.unique().size

df2.loc[10]

df2[df2.total_sqft/df2.bhk<300].head()

df2=df2[~(df2.total_sqft/df2.bhk<300)]

df2.shape

df2.price_per_sqft.describe()

def plot_scatter_chart(df,location):
    bhk2 = df[(df.location==location) & (df.bhk==2)]
    bhk3 = df[(df.location==location) & (df.bhk==3)]
    matplotlib.rcParams['figure.figsize'] = (15,10)
    plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK', s=50)
    plt.scatter(bhk3.total_sqft,bhk3.price,marker='+', color='green',label='3 BHK', s=50)
    plt.xlabel("Total Square Feet Area")
    plt.ylabel("Price (Lakh Indian Rupees)")
    plt.title(location)
    plt.legend()

plot_scatter_chart(df2,"Rajaji Nagar")

plot_scatter_chart(df2,"Hebbal")

def remove_bhk_outliers(df):
    exclude_indices = np.array([])
    for location, location_df in df.groupby('location'):
        bhk_stats = {}
        for bhk, bhk_df in location_df.groupby('bhk'):
            bhk_stats[bhk] = {
                'mean': np.mean(bhk_df.price_per_sqft),
                'std': np.std(bhk_df.price_per_sqft),
                'count': bhk_df.shape[0]
            }
        for bhk, bhk_df in location_df.groupby('bhk'):
            stats = bhk_stats.get(bhk-1)
            if stats and stats['count']>5:
                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)
    return df.drop(exclude_indices,axis='index')
df7=df2.copy()
df3 = remove_bhk_outliers(df2)


df3.shape

plot_scatter_chart(df3,"Rajaji Nagar")

def remove_pps_outliers(df):
    df_out = pd.DataFrame()
    for key, subdf in df.groupby('location'):
        m = np.mean(subdf.price_per_sqft)
        st = np.std(subdf.price_per_sqft)
        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]
        df_out = pd.concat([df_out,reduced_df],ignore_index=True)
    return df_out
df3 = remove_pps_outliers(df3)
df3.shape

import matplotlib
matplotlib.rcParams["figure.figsize"] = (10,5)
plt.hist(df3.price_per_sqft,rwidth=0.8)
plt.xlabel('Price Per Square Feet')
plt.ylabel('Count')

df3.keys()

df3.bath.unique()

plt.hist(df3.bath,rwidth=0.8)
plt.xlabel('Number of bathrooms')
plt.ylabel('Count')

df3=df3[df3.bath<df3.bhk+1]

df3.head()

df3.shape

df3.keys()

df3.drop(columns=['price_per_sqft'],inplace=True)
df7.drop(columns=['price_per_sqft'],inplace=True)

df7.dropna(inplace=True)
df7.isnull().sum()

df3.head()

df4=pd.get_dummies(df3.location)
df8=pd.get_dummies(df7.location)
df4.head()

df3 = pd.concat([df3, df4], axis=1)
df7=pd.concat([df7,df8],axis=1)

df3.head()

df3.drop(columns=['location','other'],inplace=True)
df7.drop(columns=['location','other'],inplace=True)

df3.head()

df3.shape
df2.head()

X=df3.drop(columns=['price'],inplace=False)
y=df3.price
X1=df7.drop(columns=['price'])
y1=df7.price

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=10)

X1_train,X1_test,y1_train,y1_test=train_test_split(X1,y1,test_size=0.2,random_state=10)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error as mse
from sklearn.metrics import accuracy_score
lr_clf= LinearRegression()
lr_clf.fit(X_train,y_train)
lr_clf.score(X_test,y_test)

lr_clf1= LinearRegression()
lr_clf1.fit(X1_train,y1_train)
lr_clf1.score(X1_test,y1_test)

from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import cross_val_score

cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)

cross_val_score(LinearRegression(), X, y, cv=cv)

from sklearn.model_selection import GridSearchCV

from sklearn.linear_model import Lasso
from sklearn.tree import DecisionTreeRegressor

def find_best_model_using_gridsearchcv(X,y):
    algos = {
        'lasso': {
            'model': Lasso(),
            'params': {
                'alpha': [1,2],
                'selection': ['random', 'cyclic']
            }
        },
        'decision_tree': {
            'model': DecisionTreeRegressor(),
            'params': {
                'criterion' : ['mse','friedman_mse'],
                'splitter': ['best','random']
            }
        }
    }
    scores = []
    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)
    for algo_name, config in algos.items():
        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)
        gs.fit(X,y)
        scores.append({
            'model': algo_name,
            'best_score': gs.best_score_,
            'best_params': gs.best_params_
        })

    return pd.DataFrame(scores,columns=['model','best_score','best_params'])

find_best_model_using_gridsearchcv(X,y)

find_best_model_using_gridsearchcv(X1,y1)

import xgboost as xg
xgb_r = xg.XGBRegressor(objective ='reg:linear',
                  n_estimators = 10, seed = 123)
xgb_r.fit(X_train,y_train)
xgb_r.score(X_test,y_test)

!pip install ignore_warnings
def predict_price(location,sqft,bath,bhk):
    loc_index = np.where(X.columns==location)[0][0]

    x = np.zeros(len(X.columns))
    x[0] = sqft
    x[1] = bath
    x[2] = bhk
    if loc_index >= 0:
        x[loc_index] = 1

    return lr_clf.predict([x])[0]

predict_price('1st Phase JP Nagar',1000, 3, 3)

import pickle
with open('banglore_home_prices_model.pickle','wb') as f:
    pickle.dump(lr_clf,f)

import json
columns = {
    'data_columns' : [col.lower() for col in X.columns]
}
with open("columns.json","w") as f:
    f.write(json.dumps(columns))